{"version":3,"sources":["api.ts","services/variables.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","services/services.ts","App.tsx","index.tsx"],"names":["get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","FilterType","getUser","userId","TodoList","todos","onShowModal","onSetUser","onSetSelectedTodoId","selectedTodoId","className","map","todo","isActive","id","cn","completed","title","type","onClick","todoId","response","handleShowBtn","TodoFilter","filterBy","setFilterBy","query","onSetQuery","value","onChange","event","target","All","Active","Completed","placeholder","style","pointerEvents","Loader","TodoModal","user","selectedTodo","useState","hasLoader","setHasLoader","useEffect","callback","href","email","name","App","hasModal","setHasModal","setTodos","setUser","setSelectedTodoId","setQuery","find","catch","errorMessage","console","log","finally","filteredTodos","filter","toLowerCase","includes","handleFilterTodo","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c77cf4e0.chunk.js","sourcesContent":["import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promise\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see how the loader works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","export const LOADING_TIME = 300;\n\n// eslint-disable-next-line max-len\n// export const API_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api/todos.json';\n\nexport enum FilterType {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n","import React from 'react';\nimport cn from 'classnames';\n\nimport { Todo } from '../../types/Todo';\nimport { getUser } from '../../api';\nimport { User } from '../../types/User';\n\ntype Props = {\n  todos: Todo[],\n  onShowModal: (v: boolean) => void,\n  onSetUser: (user: User) => void,\n  onSetSelectedTodoId: (number: number) => void,\n  selectedTodoId: number,\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  onShowModal,\n  onSetUser,\n  onSetSelectedTodoId,\n  selectedTodoId,\n}) => {\n  const handleShowBtn = (todoId: number, userId = 0) => {\n    onSetSelectedTodoId(todoId);\n    onShowModal(true);\n    getUser(userId).then((response) => {\n      onSetUser(response);\n    });\n  };\n\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {todos.map((todo) => {\n          const isActive = selectedTodoId === todo.id;\n\n          return (\n            <tr\n              key={todo.id}\n              data-cy=\"todo\"\n              className={cn(\n                '',\n                { 'has-background-info-light': isActive },\n              )}\n            >\n              <td className=\"is-vcentered\">{todo.id}</td>\n              <td className=\"is-vcentered\">\n                {todo.completed && (\n                  <span className=\"icon\" data-cy=\"iconCompleted\">\n                    <i className=\"fas fa-check\" />\n                  </span>\n                )}\n              </td>\n              <td className=\"is-vcentered is-expanded\">\n                <p\n                  className={cn({\n                    'has-text-danger': !todo.completed,\n                    'has-text-success': todo.completed,\n                  })}\n                >\n                  {todo.title}\n                </p>\n              </td>\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  data-cy=\"selectButton\"\n                  className=\"button\"\n                  type=\"button\"\n                  onClick={() => {\n                    handleShowBtn(todo.id, todo.userId);\n                  }}\n                >\n                  <span className=\"icon\">\n                    {isActive\n                      ? (\n                        <i className=\"far fa-eye-slash\" />\n                      ) : (\n                        <i className=\"far fa-eye\" />\n                      )}\n                  </span>\n                </button>\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n","import React from 'react';\nimport { FilterType } from '../../services/variables';\n\ntype Props = {\n  filterBy: string,\n  setFilterBy: (option: string) => void,\n  query: string,\n  onSetQuery: (option: string) => void,\n};\n\nexport const TodoFilter: React.FC<Props> = ({\n  filterBy,\n  setFilterBy,\n  query,\n  onSetQuery,\n}) => {\n  const isActive = query !== '';\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            value={filterBy}\n            data-cy=\"statusSelect\"\n            onChange={(event) => setFilterBy(event.target.value)}\n          >\n            <option value={FilterType.All}>All</option>\n            <option value={FilterType.Active}>Active</option>\n            <option value={FilterType.Completed}>Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          value={query}\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          onChange={(event) => onSetQuery(event.target.value)}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {isActive && (\n            // eslint-disable-next-line jsx-a11y/control-has-associated-label\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => onSetQuery('')}\n            />\n          )}\n        </span>\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useState, useEffect } from 'react';\nimport { Loader } from '../Loader';\nimport { showLoader } from '../../services/services';\nimport { User } from '../../types/User';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  onShowModal: (v: boolean) => void,\n  user: User | null,\n  selectedTodo: Todo | undefined,\n  selectedTodoId: number,\n  onSetSelectedTodoId: (v: number) => void,\n};\n\nexport const TodoModal: React.FC<Props> = ({\n  onShowModal,\n  user,\n  selectedTodo,\n  selectedTodoId,\n  onSetSelectedTodoId,\n}) => {\n  const [hasLoader, setHasLoader] = useState(true);\n\n  const handleCloseModal = () => {\n    onShowModal(false);\n    onSetSelectedTodoId(0);\n  };\n\n  useEffect(() => {\n    showLoader(setHasLoader);\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {hasLoader ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${selectedTodoId}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => handleCloseModal()}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {selectedTodo?.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {selectedTodo?.completed\n                ? (\n                  <strong className=\"has-text-success\">Done</strong>\n                ) : (\n                  <strong className=\"has-text-danger\">Planned</strong>\n                )}\n              {' by '}\n\n              <a href={`mailto:${user?.email}`}>\n                {user?.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import { LOADING_TIME, FilterType } from './variables';\nimport { Todo } from '../types/Todo';\n\nexport const showLoader = (callback: (v: boolean) => void) => {\n  setTimeout(() => callback(false), LOADING_TIME);\n};\n\nexport const handleFilterTodo = (\n  query: string,\n  filterBy: string,\n  todos: Todo[],\n) => {\n  if (filterBy === FilterType.All\n    && query === '') {\n    return todos;\n  }\n\n  const preparedGoods = todos.filter(todo => {\n    return todo.title\n      .toLowerCase()\n      .includes(query.toLowerCase());\n  });\n\n  return preparedGoods.filter(todo => {\n    switch (filterBy) {\n      case FilterType.Active: {\n        return todo.completed === false;\n      }\n\n      case FilterType.Completed: {\n        return todo.completed === true;\n      }\n\n      default: {\n        return todo;\n      }\n    }\n  });\n};\n","/* eslint-disable max-len */\nimport React, { useState, useEffect } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport './App.css';\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { Todo } from './types/Todo';\nimport { User } from './types/User';\nimport { getTodos } from './api';\nimport { handleFilterTodo } from './services/services';\n\nexport const App: React.FC = () => {\n  const [hasModal, setHasModal] = useState(false);\n  const [hasLoader, setHasLoader] = useState(true);\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [user, setUser] = useState<User | null>(null);\n  const [selectedTodoId, setSelectedTodoId] = useState(0);\n  const [filterBy, setFilterBy] = useState('all');\n  const [query, setQuery] = useState('');\n\n  const selectedTodo = todos.find(todo => todo.id === selectedTodoId);\n\n  useEffect(() => {\n    getTodos().then((response) => {\n      setTodos(response);\n    })\n      .catch((errorMessage) => {\n        // eslint-disable-next-line\n        console.log(errorMessage);\n        setTodos([]);\n      })\n      .finally(() => setHasLoader(false));\n  }, []);\n\n  const filteredTodos = handleFilterTodo(query, filterBy, todos);\n\n  return (\n    <div className=\"App\">\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                filterBy={filterBy}\n                setFilterBy={setFilterBy}\n                query={query}\n                onSetQuery={setQuery}\n              />\n            </div>\n\n            <div className=\"block\">\n              {hasLoader && (\n                <Loader />\n              )}\n              <TodoList\n                onShowModal={setHasModal}\n                todos={filteredTodos}\n                onSetUser={setUser}\n                onSetSelectedTodoId={setSelectedTodoId}\n                selectedTodoId={selectedTodoId}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {hasModal && (\n        <TodoModal\n          user={user}\n          onShowModal={setHasModal}\n          selectedTodo={selectedTodo}\n          selectedTodoId={selectedTodoId}\n          onSetSelectedTodoId={setSelectedTodoId}\n        />\n      )}\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}